import std::config;
import std::config::toml;
import std::io;
import std::config::conv;

class X {

    let _i : i32;
    let _f : f64;
    
    pub self (i : i32, f : f64) with _i = i, _f = f {}
    
    impl std::config::conv::Serializable {
        pub over serialize (self)-> &Config {
            let dmut d = Dict::new ();
            d:.insert ("Foo", Int::new (self._i));
            d:.insert ("Bar", Float::new (self._f));
            d
        }
    }

    impl Streamable;
}

struct
| foo : &X
| bar : &X
| baz : &X
 -> Y;

def main () {
    let a = Y (foo-> X::new (1, 3.0), bar-> X::new (87, 32.0), baz-> X::new (42, 9.0));
    println (dump (a.to!(&Config) ()));
}
