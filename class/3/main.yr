import std::io;
import std::time::_;

trait Test {
    pub def baz (self) {
        println (self::typeinfo.name, " baz");
    }
}

class A {
    
    pub self () {
        println ("new A");
    }
    
    pub def opEquals (self, _ : &A) -> bool {
        true
    }

    pub def foo (self, b : &B!{&A} = { B!{&A}::new () }) {
        println ("A foo");
        b.bar ();
    }
    
    impl Test;
    
}

class C over A {
    pub self () {
        println ("new C");
    }
    
    pub def foo (self, _ : bool, b : &B!{&C} = { B!{&C}::new () }) {
        println ("C foo");
        b.bar ();
    }
}

class B {T impl Test} {
       
    pub self () {
        println ("new B");
    }

    cte if (__pragma!operator ("==", T, T)) {        
        pub def bar (self)-> &B {
            println ("B bar");
            let z = T::new ();
            z.baz ();
            B::new ()
        }
    }
    
}

/**
 * Main function
 */
def main ()
{
    let a = A::new ();
    a.foo ();

    println ("=====");
    
    let c = C::new ();
    c.foo (false);
    
} 
