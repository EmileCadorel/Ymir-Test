import std::net::_;
import std::io;

class X {
    pub let i : i32;
    pub let a : [i32];
    pub let c : [c8];
    
    pub self (i : i32, a : [i32], c : [c8]) with i = i, a = a, c = c {}

    impl Packable;
    impl Printable;
}

class Y over X {

    pub let j : i32;
    pub let x : &X;
    
    pub self (j : i32, x : &X) with super (2, [3, 4, 5], "bar"s8), j = j, x = x {}

    impl Packable;
    impl Printable;    
}


def foo () -> [u8] {
    (Y::new (780, X::new (1, [1, 2, 3], "baz"s8))).pack ()
}

def main ()
    throws &UnpackError
{
    let packet = foo ();
    println (packet);
    match packet.unpack () {
        x : &X => {
            println (x);
        }
    }
    
}
