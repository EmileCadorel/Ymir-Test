import std::net::_;
import std::concurrency::future;
import std::io;

extern (C) def usleep (nb: i32);

mod client {

    pub def connect () {
        let dmut client = TcpStream::connect (SockAddrV4::new (Ipv4::LOCALHOST, 4000u16));
        println (client:.rawReceive!{c8} (8us)); // recv of a [c8], of size 8
        client:.close ();
    } catch {
        x : _ => {
            println ("Client TCP error : ", x);
        }
    }
    
}

mod server {

    pub def greetClient (dmut client : &TcpStream) {
        client:.rawSend ("Hello !!"s8);
    }

    pub def start () {
        let dmut server = TcpListener::listen (SockAddrV4::new (Ipv4::LOCALHOST, 4000u16));
        {
            let dmut client = server:.accept ();
            println ("New Client connected");
            greetClient (alias client);
            client:.close ();
        }
        server:.close ();
    } catch {
        x : _ => {
            println ("Server TCP error : ", x);            
        }
    }
       
}
    


def main () {
    let f = future (&server::start);
    usleep (100_000);
    
    client::connect ();
    f.wait ();
}
    
