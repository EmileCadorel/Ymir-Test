import std::io;
import std::fs;
import std::fs::path;
import std::fs::iteration;
import std::stream;


def tree (path : &Path) -> [c8] {
    let dmut stream = StringStream::new ();
    stream:.write (".\n");
    stream:.entabing (txt-> "\t| "s8);
    {
        tree (alias stream, readDir (path));
    } catch {
        _ : _ => {}
    }
    stream:.detabing ();
    return stream [];
}

def tree (dmut stream : &StringStream, dir : &DirEntry) {
    for e in dir {
        match e {
            f : &FileEntry => { stream:.write (f.getPath ().toStr (), "\n"); }
            d : &DirEntry => {
                stream:.write (d.getPath ().toStr (), "\n");
                stream:.entabing (txt-> "\t| "s8);
                tree (alias stream, d);
                stream:.detabing ();                
            }
        }
    }
}

def main ()
{
    createDir (Path::new ("./test"));
    createFile (Path::new ("./test/file.txt"));
    println ("Creation : ====================== ");
    println (tree (Path::new (".")));
    println ("================================= ");
    removeDir (Path::new ("./test"), recursive-> true);
    println ("Deletion : ====================== ");
    println (tree (Path::new (".")));
    println ("================================= ");
} catch {
    x : _ => {
        println (x);
    }
}
